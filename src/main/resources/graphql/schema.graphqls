type User {
    id : ID
    name: String
    email: String
    password: String
    address: Address
}

type Address {
    street: String
    number: Int
    zipcode: Int
    city: String
}

type UserDTO {
    id : ID
    name: String
    email: String
    address: Address
}

type MapStats {
    id: ID!
    ct: Int
    date: String
}

input AddressI {
    street: String
    number: Int
    zipcode: Int
    city: String
}

input UserInput {
    name: String
    email: String
    password: String
    address: AddressI
}

type Query {
    findAll: [UserDTO]
    findUserById(id:ID): UserDTO
    getUserStats: [MapStats]
    resetStats: [MapStats]
}

type Mutation {
    createUser(user : UserInput): User
    updateUser(id:ID,user:UserInput): User
    deleteUser(id:ID): User
}

type Subscription {
    randomNumber: String
    getUsers: [UserDTO]
}